1
abstract class FormaGeometrica {
    public abstract double calcularArea();
}

class Circulo extends FormaGeometrica {
    private double raio;

    public Circulo(double raio) {
        this.raio = raio;
    }

    @Override
    public double calcularArea() {
        return Math.PI * raio * raio;
    }
}

class Retangulo extends FormaGeometrica {
    private double largura, altura;

    public Retangulo(double largura, double altura) {
        this.largura = largura;
        this.altura = altura;
    }

    @Override
    public double calcularArea() {
        return largura * altura;
    }
}

class Triangulo extends FormaGeometrica {
    private double base, altura;

    public Triangulo(double base, double altura) {
        this.base = base;
        this.altura = altura;
    }

    @Override
    public double calcularArea() {
        return (base * altura) / 2;
    }
}

public class Main {
    public static void main(String[] args) {
        FormaGeometrica[] formas = {
            new Circulo(5),
            new Retangulo(4, 6),
            new Triangulo(3, 7)
        };

        for (FormaGeometrica forma : formas) {
            System.out.println("Área: " + forma.calcularArea());
        }
    }
}
2
abstract class Animal {
    public abstract void emitirSom();
    public abstract void mover();
}

class Cachorro extends Animal {
    @Override
    public void emitirSom() {
        System.out.println("Latido");
    }

    @Override
    public void mover() {
        System.out.println("O cachorro está correndo");
    }
}

class Gato extends Animal {
    @Override
    public void emitirSom() {
        System.out.println("Miau");
    }

    @Override
    public void mover() {
        System.out.println("O gato está andando");
    }
}

class Passaro extends Animal {
    @Override
    public void emitirSom() {
        System.out.println("Piu piu");
    }

    @Override
    public void mover() {
        System.out.println("O pássaro está voando");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal[] animais = {
            new Cachorro(),
            new Gato(),
            new Passaro()
        };

        for (Animal animal : animais) {
            animal.emitirSom();
            animal.mover();
        }
    }
}
3
abstract class ContaBancaria {
    protected double saldo;

    public ContaBancaria(double saldoInicial) {
        this.saldo = saldoInicial;
    }

    public abstract void sacar(double valor);
    public abstract void depositar(double valor);

    public double getSaldo() {
        return saldo;
    }
}

class ContaCorrente extends ContaBancaria {

    public ContaCorrente(double saldoInicial) {
        super(saldoInicial);
    }

    @Override
    public void sacar(double valor) {
        saldo -= valor;
    }

    @Override
    public void depositar(double valor) {
        saldo += valor;
    }
}

class ContaPoupanca extends ContaBancaria {

    public ContaPoupanca(double saldoInicial) {
        super(saldoInicial);
    }

    @Override
    public void sacar(double valor) {
        saldo -= valor;
    }

    @Override
    public void depositar(double valor) {
        saldo += valor;
    }
}

public class Main {
    public static void main(String[] args) {
        ContaBancaria cc = new ContaCorrente(1000);
        ContaBancaria cp = new ContaPoupanca(2000);

        cc.sacar(100);
        cp.depositar(500);

        System.out.println("Saldo Conta Corrente: " + cc.getSaldo());
        System.out.println("Saldo Conta Poupança: " + cp.getSaldo());
    }
}
4
abstract class Pagamento {
    public abstract double calcularValor();
}

class PagamentoCartaoCredito extends Pagamento {
    private double valorCompra;

    public PagamentoCartaoCredito(double valorCompra) {
        this.valorCompra = valorCompra;
    }

    @Override
    public double calcularValor() {
        return valorCompra * 1.05; // 5% de taxa de cartão
    }
}

class PagamentoBoleto extends Pagamento {
    private double valorCompra;

    public PagamentoBoleto(double valorCompra) {
        this.valorCompra = valorCompra;
    }

    @Override
    public double calcularValor() {
        return valorCompra; // sem taxa adicional
    }
}

public class Main {
    public static void main(String[] args) {
        Pagamento pagamento1 = new PagamentoCartaoCredito(1000);
        Pagamento pagamento2 = new PagamentoBoleto(1000);

        System.out.println("Valor a pagar no cartão: " + pagamento1.calcularValor());
        System.out.println("Valor a pagar no boleto: " + pagamento2.calcularValor());
    }
}
5
abstract class Funcionario {
    public abstract double calcularSalario();
}

class Gerente extends Funcionario {
    private double salarioBase;

    public Gerente(double salarioBase) {
        this.salarioBase = salarioBase;
    }

    @Override
    public double calcularSalario() {
        return salarioBase + salarioBase * 0.15; // 15% de bônus
    }
}

class Programador extends Funcionario {
    private double salarioBase;

    public Programador(double salarioBase) {
        this.salarioBase = salarioBase;
    }

    @Override
    public double calcularSalario() {
        return salarioBase;
    }
}

public class Main {
    public static void main(String[] args) {
        Funcionario gerente = new Gerente(5000);
        Funcionario programador = new Programador(3000);

        System.out.println("Salário do Gerente: " + gerente.calcularSalario());
        System.out.println("Salário do Programador: " + programador.calcularSalario());
    }
}
